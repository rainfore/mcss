(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _tokenizer = __webpack_require__(1);\n\nvar _tokenizer2 = _interopRequireDefault(_tokenizer);\n\nvar _parser = __webpack_require__(3);\n\nvar _parser2 = _interopRequireDefault(_parser);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar content = '\\n.u-btn {\\n    background: red;\\n}\\n';\nvar content2 = '$test = $abc; $test = 4px;';\nvar content3 = '\\n.u-btn, .test {}\\n';\n\nvar tokenizer = new _tokenizer2.default();\nvar parser = new _parser2.default();\n\nvar tokens = tokenizer.tokenize(content);\nvar ast = parser.parse(tokens);\n\nconsole.log(ast);//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi90ZXN0L3NwZWNzL3BhcnNlci5qcz8xZTIzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7QUFDQTs7Ozs7O0FBRUEsSUFBSSxpREFBSjtBQUtBLElBQUksV0FBVyw0QkFBZjtBQUNBLElBQUksaUNBQUo7O0FBSUEsSUFBSSxZQUFZLHlCQUFoQjtBQUNBLElBQUksU0FBUyxzQkFBYjs7QUFFQSxJQUFJLFNBQVMsVUFBVSxRQUFWLENBQW1CLE9BQW5CLENBQWI7QUFDQSxJQUFJLE1BQU0sT0FBTyxLQUFQLENBQWEsTUFBYixDQUFWOztBQUVBLFFBQVEsR0FBUixDQUFZLEdBQVoiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUb2tlbml6ZXIgZnJvbSAnLi4vLi4vc3JjL3Rva2VuaXplci5qcyc7XG5pbXBvcnQgUGFyc2VyIGZyb20gJy4uLy4uL3NyYy9wYXJzZXIuanMnO1xuXG5sZXQgY29udGVudCA9IGBcbi51LWJ0biB7XG4gICAgYmFja2dyb3VuZDogcmVkO1xufVxuYDtcbmxldCBjb250ZW50MiA9ICckdGVzdCA9ICRhYmM7ICR0ZXN0ID0gNHB4Oyc7XG5sZXQgY29udGVudDMgPSBgXG4udS1idG4sIC50ZXN0IHt9XG5gO1xuXG5sZXQgdG9rZW5pemVyID0gbmV3IFRva2VuaXplcigpO1xubGV0IHBhcnNlciA9IG5ldyBQYXJzZXIoKTtcblxubGV0IHRva2VucyA9IHRva2VuaXplci50b2tlbml6ZShjb250ZW50KTtcbmxldCBhc3QgPSBwYXJzZXIucGFyc2UodG9rZW5zKTtcblxuY29uc29sZS5sb2coYXN0KTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vdGVzdC9zcGVjcy9wYXJzZXIuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _util = __webpack_require__(2);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// >>>>>> 待优化\n// the more fast version\n// let toAssert2 = util.makePredicate;\n\nvar isUnit = (0, _util.toAssert)('% em ex ch rem vw vh vmin vmax cm mm in pt pc px deg grad rad turn s ms Hz kHz dpi dpcm dppx');\n// let isPseudoClass = toAssert2([\"dir\",\"lang\",\"any-link\", \"link\", \"visited\", \"local-link\",\"target\", \"scope\", \"current\", \"past\", \"future\", \"active\", \"hover\", \"focus\", \"active-drop\", \"valid-drop\", \"invalid-drop\", \"enabled\", \"disabled\", \"enabled\", \"disabled\", \"read-only\", \"read-write\", \"placeholder-shown\", \"default\", \"checked\", \"indeterminate\", \"valid\", \"invalid\", \"in-range\", \"out-of-range\", \"required\", \"optional\", \"root\", \"empty\", \"blank\", \"nth-child\", \"nth-last-child\", \"first-child\", \"last-child\", \"only-child\", \"nth-of-type\", \"nth-last-of-type\", \"first-of-type\", \"last-of-type\", \"only-of-type\", \"nth-match\", \"nth-last-match\", 'nth-column', 'nth-last-column', 'not', 'matches', 'before', 'after', '-moz-placeholder']);\n// let isBifs = toAssert2(bifs.concat(['rgb', 'rgba', 'url', 'counter', 'attr', 'calc', 'min', 'max', 'cycle', 'linear-gradient', 'radial-gradient', 'repeating-linear-gradient', 'repeating-radial-gradient']), true);\nvar isPseudoClassWithParen = (0, _util.toAssert)('current local-link nth-child nth-last-child nth-of-type nth-last-of-type nth-match nth-last-match column nth-column nth-last-column lang matches not');\n\n// [W3C]: http://dev.w3.org/csswg/css-syntax/\nvar MAX_ALLOWED_CODEPOINT = parseInt('10FFFF', 16); // [W3C#maximum-allowed-codepoint]\nvar REPLACEMENT_CHARACTER = parseInt('FFFD', 16);\n\n// Token Types\n// ===========================================\n// >>>>>> 什么意思\n// // inspectToken, get tokenName with TokenType(uid)\n// tokenizer.inspect = function(tokenType){\n//     let typeType = tokenType.type || tokenType;\n//     for(let i in tokenizer){\n//         if(typeof tokenizer[i] === 'number' && tokenizer[i] === tokenType) return i;\n//     }\n// }\n\n(0, _util.$)('nl', /\\r\\n|[\\r\\f\\n]/); // newline\n(0, _util.$)('w', /[ \\t\\r\\n\\f]/); // whitespace\n(0, _util.$)('d', /[0-9]/); // digital\n(0, _util.$)('escape', /\\\\[0-9a-f]{1,6}/); // escape char\n(0, _util.$)('nmchar', /[_-\\w\\u00A1-\\uFFFF]|{escape}/);\n(0, _util.$)('nmstart', /[_a-zA-Z\\u00A1-\\uFFFF]|{escape}/);\n(0, _util.$)('ident', /-?{nmstart}{nmchar}*/);\n\n// registed macros\n// =====================\nvar $rules = [{ // multiline comment | singleline comment\n    regexp: /\\/\\*([^\\x00]+?)\\*\\/|\\/\\/([^\\n\\r]*)/,\n    action: function action(yytext, mcomment, scomment) {\n        var isSingle = mcomment === undefined;\n        // >>>>>> ? 这个方法是怎么用的\n        this.options.comment && this.options.comment({\n            type: isSingle ? 'singleline' : 'multiline',\n            content: isSingle ? scomment : mcomment\n        });\n    }\n}, { // url [W3C]\n    regexp: (0, _util.$)(/(url|url\\-prefix|domain|regexp){w}*\\((['\"])?{w}*([^\\r\\n\\f]*?)\\2{w}*\\)/),\n    action: function action(yytext, name, quote, url) {\n        if (name === 'url') return { type: 'URL', value: url };else return { type: 'FUNCTION', value: name, args: [{ type: 'STRING', value: url }] };\n    }\n}, { // function [W3C]\n    regexp: (0, _util.$)(/(?:\\$?-?[_A-Za-z][-_\\w]*)(?=\\()/),\n    action: function action(value) {\n        return { type: 'FUNCTION', value: value };\n    }\n}, { // $variable\n    regexp: /\\$(-?[_A-Za-z][-_\\w]*)/,\n    action: function action(yytext, value) {\n        return { type: 'VAR', value: value };\n    }\n}, { // ident [W3C], 即 -o-webkit-xx 是允许的\n    regexp: (0, _util.$)(/{ident}/),\n    action: function action(value) {\n        if (value === 'false' || value === 'true') return { type: 'BOOLEAN', value: value === 'true' };else if (value === 'null') return { type: 'NULL', value: null };else return { type: 'TEXT', value: value };\n    }\n},\n// {    // @css at-rule no parse\n//     reg: /@css{w}*{/,\n//     action(yytext) {\n//     }\n// },\n{ // dimension: number + unit\n    regexp: (0, _util.$)(/(-?(?:{d}*\\.{d}+|{d}+))(\\w*|%)?/),\n    action: function action(yytext, value, unit) {\n        if (unit && !isUnit(unit)) this.error('Unexcept unit: \"' + unit + '\"');\n        return { type: 'DIMENSION', value: +value, unit: unit };\n    }\n}, { // class\n    regexp: (0, _util.$)(/\\.({nmchar}+)/),\n    action: function action(value) {\n        return { type: 'CLASS', value: value };\n    }\n}, { // at-keyword, @\n    regexp: /@(-?[_A-Za-z][-_\\w]*)/,\n    action: function action(yytext, value) {\n        return { type: 'AT_KEYWORD', value: value };\n    }\n}, { // !important\n    regexp: (0, _util.$)(/!{w}*important/),\n    action: function action(yytext) {\n        return { type: 'IMPORTANT' };\n    }\n}, { // pesudo-class\n    regexp: (0, _util.$)(':([-_a-zA-Z]+)' + // 伪类名\n    '(?:\\\\(' + // 括号开始\n    '([^\\\\(\\\\)]*' + // 第一种无括号\n    '|(?:' + // 有括号(即伪类中仍有伪类并且是带括号的)\n    '\\\\([^\\\\)]+\\\\)' + // 括号部分\n    /*'|[^\\\\(\\\\)]*' +*/')+)' + // 关闭有括号\n    '\\\\))'),\n    action: function action(yytext, value) {\n        // >>>>>> ?什么意思\n        // false 使用其它方式再token一次\n        if (!yytext.includes('(') && !isPseudoClassWithParen(value)) return null;\n\n        return { type: 'PSEUDO_CLASS', value: yytext };\n    }\n}, { // pesudo-element\n    regexp: (0, _util.$)('::({nmchar}+)'),\n    action: function action(value) {\n        return { type: 'PSEUDO_ELEMENT', value: value };\n    }\n}, { // attribute, [title=haha]\n    regexp: (0, _util.$)('\\\\[\\\\s*(?:{nmchar}+)\\\\s*(?:([*^$|~!]?=)\\\\s*[\\'\\\"]?(?:[^\\'\\\"\\\\[]*)[\\'\\\"]?)?\\\\s*\\\\]'),\n    action: function action(value) {\n        return { type: 'ATTRIBUTE', value: value };\n    }\n}, { // #hash\n    regexp: (0, _util.$)(/#{nmchar}+/),\n    action: function action(value) {\n        return { type: 'HASH', value: value };\n    }\n}, { // string\n    regexp: /(['\"])([^\\r\\n\\f]*?)\\1/,\n    action: function action(yytext, quote) {\n        var value = arguments.length <= 2 || arguments[2] === undefined ? '' : arguments[2];\n\n        return { type: 'STRING', value: value };\n    }\n}, { // punctuator can ignore 'WS'\n    regexp: (0, _util.$)(/{w}*(&&|\\|\\||[\\*\\$\\^~\\|>=<!?]?=|\\.\\.\\.|[\\{;,><]){w}*/),\n    action: function action(yytext, value) {\n        return { type: value };\n        // return {type: 'PUNCTUATOR', value};\n    }\n}, { // whitespace\n    regexp: (0, _util.$)('WS', /{w}+/),\n    action: function action(value) {\n        return { type: 'WS', value: value };\n    }\n}, {\n    // punctuator | operator | logic | other\n    // .. ::\n    // []{}() ; , : & #\n    // ->\n    // *= // $= // ^= ~= |=\n    // >= <= == != =\n    // < > / * + -\n    // ..  or .\n    regexp: /($|#\\{|:|::|[~!#()\\[\\]&\\.]|[\\}%\\-+*\\/])/,\n    action: function action(value) {\n        return { type: value ? value : 'EOF' };\n    }\n}, { // convert escaped unicode to TEXT\n    regexp: (0, _util.$)(/\\\\([0-9a-fA-F]{1,6})/),\n    action: function action(yytext, value) {\n        var hex = parseInt(value, 16);\n        if (hex > MAX_ALLOWED_CODEPOINT) hex = '�';\n        hex = '\\\\' + hex.toString(16);\n        return { type: 'TEXT', value: hex };\n    }\n}];\n\n$rules.forEach(function (rule) {\n    var reg = typeof rule.regexp !== 'string' ? String(rule.regexp).slice(1, -1) : rule.regexp;\n    if (!reg.startsWith('^(?')) rule.regexp = new RegExp('^(?:' + reg + ')');\n});\n\n/**\n * Tokenizer Class\n * @param {object}  options\n * @param {boolean} ignoreComment\n */\n\nvar Tokenizer = function () {\n    function Tokenizer() {\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        _classCallCheck(this, Tokenizer);\n\n        this.options = options;\n        this.options.ignoreComment = true;\n    }\n\n    _createClass(Tokenizer, [{\n        key: 'tokenize',\n        value: function tokenize() {\n            var input = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];\n\n            // simplify newline token detect\n            this.input = input;\n            // remained input\n            this.remained = input;\n            this.lineno = 1;\n            this.states = ['init'];\n            this.state = 'init';\n            return this.pump();\n        }\n\n        // 一次性输出所有tokens\n\n    }, {\n        key: 'pump',\n        value: function pump() {\n            var tokens = [];\n            var token = void 0;\n            while (token = this.lex()) {\n                tokens.push(token);\n                if (token.type === 'EOF') break;\n            }\n            return tokens;\n        }\n\n        // >>>>>> 一定会有跳过的问题吗？\n        // 依赖next\n\n    }, {\n        key: 'lex',\n        value: function lex() {\n            var token = this.next();\n            return token ? token : this.lex(); // >>>>>> undefined;\n        }\n    }, {\n        key: 'next',\n        value: function next() {\n            var tmp = void 0,\n                token = void 0;\n\n            for (var i = 0; i < $rules.length; i++) {\n                var rule = $rules[i]; //[link[i]];\n                // 匹配\n                tmp = this.remained.match(rule.regexp);\n                if (!tmp) continue;\n                // 生成token\n                token = rule.action.apply(this, tmp);\n                if (token) break;\n            }\n\n            if (tmp && token) {\n                var lines = tmp[0].match(/(?:\\r\\n|[\\n\\r\\f]).*/g);\n                if (lines) this.lineno += lines.length;\n                token.lineno = this.lineno;\n                this.remained = this.remained.slice(tmp[0].length);\n                if (token.type === 'WS') {\n                    if (this._preIsWS) token = undefined;\n                    this._preIsWS = true;\n                } else this._preIsWS = false;\n                return token;\n            } else this.error('Unexpect token start');\n        }\n    }, {\n        key: 'pushState',\n        value: function pushState(condition) {\n            this.states.push(condition);\n            this.state = condition;\n        }\n    }, {\n        key: 'popState',\n        value: function popState() {\n            this.states.pop();\n            this.state = this.states[this.states.length - 1];\n        }\n    }, {\n        key: 'error',\n        value: function (_error) {\n            function error(_x2) {\n                return _error.apply(this, arguments);\n            }\n\n            error.toString = function () {\n                return _error.toString();\n            };\n\n            return error;\n        }(function (message) {\n            var err = new error.SyntaxError(message, this.lineno, this.options);\n            err.column = this._getColumn();\n            throw err;\n        })\n    }, {\n        key: '_getColumn',\n        value: function _getColumn() {\n            var newline = /^[\\n\\f\\r]/;\n            var n = this.input.length - this.remained.length;\n            var column = 0;\n            for (; n--;) {\n                if (newline.test(this.input.charAt(n)) && n >= 0) break;\n                column++;\n            }\n        }\n\n        // _traceError: function(message){\n        //     let matchLength = this.length - this.remained.length;\n        //     let offset = matchLength - 10;\n        //     if(offset < 0) offset = 0;\n        //     let pointer = matchLength - offset;\n        //     let posMessage = this.input.slice(offset, offset + 20)\n        //     // TODO: 加上trace info\n        //     return 'Error on line ' + (this.lineno + 1) + \" \" +\n        //         (message || '. Unrecognized input.') + \"\\n\" + (offset === 0? '':'...') +\n        //         posMessage + \"...\\n\" + new Array(pointer + (offset === 0? 0 : 3) ).join(' ') + new Array(10).join(\"^\");\n        // }\n\n    }]);\n\n    return Tokenizer;\n}();\n\nexports.default = Tokenizer;//@ sourceMappingURL=data:application/json;base64,");

/***/ },
/* 2 */
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n// import fs from 'fs';\n// import mkdirp from 'mkdirp';\n// import path from 'path';\n// import tpl from './tpl';\n// import tpl from './tpl';\n\nvar returnTrue = function returnTrue() {\n    return true;\n};\n\nvar _ = {\n    accept: function accept(fn, list) {\n        if (!list || !list.length) return;\n\n        var tlist = list.map(function (item) {\n            if (!item) return returnTrue;\n\n            if (typeof item === 'function') return item;\n\n            return _.makePredicate(item);\n        });\n    }\n};\n\n/**\n * register regexp pattern\n * @return {[type]} [description]\n */\nvar $ = function () {\n    var table = {};\n    return function (name, pattern) {\n        if (!pattern) {\n            if (/^[a-zA-Z]+$/.test(name)) // $('WS');\n                return table[name];else {\n                // $(/.../);\n                pattern = name;\n                name = null;\n            }\n        }\n\n        if (typeof pattern !== 'string') pattern = String(pattern).slice(1, -1);\n\n        pattern = pattern.replace(/\\{([a-zA-Z]+)}/g, function (all, name) {\n            var p = table[name];\n            if (!p) throw Error('no register pattern ' + name + ' before');\n            var pstart = p.charAt(0),\n                pend = p.charAt(p.length - 1);\n            if (!(pstart === '[' && pend === ']') && !(pstart === '(' && pend === ')')) p = '(?:' + p + ')';\n            return p;\n        });\n\n        // register\n        name && (table[name] = pattern);\n        return new RegExp(pattern);\n    };\n}();\n\nvar toAssert = function toAssert(str) {\n    var arr = typeof str === 'string' ? str.split(/\\s+/) : str;\n    return function (word) {\n        return arr.includes(word);\n    };\n};\n\nvar makePredicate = toAssert;\n\nexports.$ = $;\nexports.toAssert = toAssert;\nexports.makePredicate = makePredicate;//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaGVscGVyL3V0aWwuanM/OTY4OCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQU1BLElBQU0sYUFBYSxTQUFiLFVBQWE7QUFBQSxXQUFNLElBQU47QUFBQSxDQUFuQjs7QUFFQSxJQUFJLElBQUk7QUFDSixVQURJLGtCQUNHLEVBREgsRUFDTyxJQURQLEVBQ2E7QUFDYixZQUFHLENBQUMsSUFBRCxJQUFTLENBQUMsS0FBSyxNQUFsQixFQUNJOztBQUVKLFlBQUksUUFBUSxLQUFLLEdBQUwsQ0FBUyxVQUFDLElBQUQsRUFBVTtBQUMzQixnQkFBRyxDQUFDLElBQUosRUFDSSxPQUFPLFVBQVA7O0FBRUosZ0JBQUcsT0FBTyxJQUFQLEtBQWdCLFVBQW5CLEVBQ0ksT0FBTyxJQUFQOztBQUVKLG1CQUFPLEVBQUUsYUFBRixDQUFnQixJQUFoQixDQUFQO0FBQ0gsU0FSVyxDQUFaO0FBV0g7QUFoQkcsQ0FBUjs7Ozs7O0FBMEJBLElBQUksSUFBSyxZQUFXO0FBQ2hCLFFBQUksUUFBUSxFQUFaO0FBQ0EsV0FBTyxVQUFDLElBQUQsRUFBTyxPQUFQLEVBQW1CO0FBQ3RCLFlBQUcsQ0FBQyxPQUFKLEVBQWE7QUFDVCxnQkFBRyxjQUFjLElBQWQsQ0FBbUIsSUFBbkIsQ0FBSCxFO0FBQ0ksdUJBQU8sTUFBTSxJQUFOLENBQVAsQ0FESixLQUVLOztBQUNELDBCQUFVLElBQVY7QUFDQSx1QkFBTyxJQUFQO0FBQ0g7QUFDSjs7QUFFRCxZQUFHLE9BQU8sT0FBUCxLQUFtQixRQUF0QixFQUNJLFVBQVUsT0FBTyxPQUFQLEVBQWdCLEtBQWhCLENBQXNCLENBQXRCLEVBQXlCLENBQUMsQ0FBMUIsQ0FBVjs7QUFFSixrQkFBVSxRQUFRLE9BQVIsQ0FBZ0IsaUJBQWhCLEVBQW1DLFVBQUMsR0FBRCxFQUFNLElBQU4sRUFBZTtBQUN4RCxnQkFBSSxJQUFJLE1BQU0sSUFBTixDQUFSO0FBQ0EsZ0JBQUcsQ0FBQyxDQUFKLEVBQ0ksTUFBTSwrQkFBNkIsSUFBN0IsYUFBTjtBQUNKLGdCQUFJLFNBQVMsRUFBRSxNQUFGLENBQVMsQ0FBVCxDQUFiO2dCQUEwQixPQUFPLEVBQUUsTUFBRixDQUFTLEVBQUUsTUFBRixHQUFXLENBQXBCLENBQWpDO0FBQ0EsZ0JBQUcsRUFBRSxXQUFXLEdBQVgsSUFBa0IsU0FBUyxHQUE3QixLQUFxQyxFQUFFLFdBQVcsR0FBWCxJQUFrQixTQUFTLEdBQTdCLENBQXhDLEVBQ0ksSUFBSSxRQUFRLENBQVIsR0FBWSxHQUFoQjtBQUNKLG1CQUFPLENBQVA7QUFDSCxTQVJTLENBQVY7OztBQVdBLGlCQUFTLE1BQU0sSUFBTixJQUFjLE9BQXZCO0FBQ0EsZUFBTyxJQUFJLE1BQUosQ0FBVyxPQUFYLENBQVA7QUFDSCxLQTFCRDtBQTJCSCxDQTdCTyxFQUFSOztBQStCQSxJQUFJLFdBQVcsU0FBWCxRQUFXLENBQVMsR0FBVCxFQUFjO0FBQ3pCLFFBQUksTUFBTSxPQUFPLEdBQVAsS0FBZSxRQUFmLEdBQTBCLElBQUksS0FBSixDQUFVLEtBQVYsQ0FBMUIsR0FBNkMsR0FBdkQ7QUFDQSxXQUFPLFVBQUMsSUFBRDtBQUFBLGVBQVUsSUFBSSxRQUFKLENBQWEsSUFBYixDQUFWO0FBQUEsS0FBUDtBQUNILENBSEQ7O0FBS0EsSUFBSSxnQkFBZ0IsUUFBcEI7O1FBRVEsQyxHQUFBLEM7UUFBRyxRLEdBQUEsUTtRQUFVLGEsR0FBQSxhIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnQgZnMgZnJvbSAnZnMnO1xuLy8gaW1wb3J0IG1rZGlycCBmcm9tICdta2RpcnAnO1xuLy8gaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG4vLyBpbXBvcnQgdHBsIGZyb20gJy4vdHBsJztcbi8vIGltcG9ydCB0cGwgZnJvbSAnLi90cGwnO1xuXG5jb25zdCByZXR1cm5UcnVlID0gKCkgPT4gdHJ1ZTtcblxubGV0IF8gPSB7XG4gICAgYWNjZXB0KGZuLCBsaXN0KSB7XG4gICAgICAgIGlmKCFsaXN0IHx8ICFsaXN0Lmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBsZXQgdGxpc3QgPSBsaXN0Lm1hcCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgaWYoIWl0ZW0pXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldHVyblRydWU7XG5cbiAgICAgICAgICAgIGlmKHR5cGVvZiBpdGVtID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtO1xuXG4gICAgICAgICAgICByZXR1cm4gXy5tYWtlUHJlZGljYXRlKGl0ZW0pO1xuICAgICAgICB9KTtcblxuXG4gICAgfSxcblxuXG5cbn07XG5cbi8qKlxuICogcmVnaXN0ZXIgcmVnZXhwIHBhdHRlcm5cbiAqIEByZXR1cm4ge1t0eXBlXX0gW2Rlc2NyaXB0aW9uXVxuICovXG5sZXQgJCA9IChmdW5jdGlvbigpIHtcbiAgICBsZXQgdGFibGUgPSB7fTtcbiAgICByZXR1cm4gKG5hbWUsIHBhdHRlcm4pID0+IHtcbiAgICAgICAgaWYoIXBhdHRlcm4pIHtcbiAgICAgICAgICAgIGlmKC9eW2EtekEtWl0rJC8udGVzdChuYW1lKSkgICAgLy8gJCgnV1MnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFibGVbbmFtZV07XG4gICAgICAgICAgICBlbHNlIHsgIC8vICQoLy4uLi8pO1xuICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBuYW1lO1xuICAgICAgICAgICAgICAgIG5hbWUgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYodHlwZW9mIHBhdHRlcm4gIT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgcGF0dGVybiA9IFN0cmluZyhwYXR0ZXJuKS5zbGljZSgxLCAtMSk7XG5cbiAgICAgICAgcGF0dGVybiA9IHBhdHRlcm4ucmVwbGFjZSgvXFx7KFthLXpBLVpdKyl9L2csIChhbGwsIG5hbWUpID0+IHtcbiAgICAgICAgICAgIGxldCBwID0gdGFibGVbbmFtZV07XG4gICAgICAgICAgICBpZighcClcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihgbm8gcmVnaXN0ZXIgcGF0dGVybiAke25hbWV9IGJlZm9yZWApO1xuICAgICAgICAgICAgbGV0IHBzdGFydCA9IHAuY2hhckF0KDApLCBwZW5kID0gcC5jaGFyQXQocC5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIGlmKCEocHN0YXJ0ID09PSAnWycgJiYgcGVuZCA9PT0gJ10nKSAmJiAhKHBzdGFydCA9PT0gJygnICYmIHBlbmQgPT09ICcpJykpXG4gICAgICAgICAgICAgICAgcCA9ICcoPzonICsgcCArICcpJztcbiAgICAgICAgICAgIHJldHVybiBwO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyByZWdpc3RlclxuICAgICAgICBuYW1lICYmICh0YWJsZVtuYW1lXSA9IHBhdHRlcm4pO1xuICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChwYXR0ZXJuKTtcbiAgICB9XG59KSgpO1xuXG5sZXQgdG9Bc3NlcnQgPSBmdW5jdGlvbihzdHIpIHtcbiAgICBsZXQgYXJyID0gdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgPyBzdHIuc3BsaXQoL1xccysvKSA6IHN0cjtcbiAgICByZXR1cm4gKHdvcmQpID0+IGFyci5pbmNsdWRlcyh3b3JkKTtcbn1cblxubGV0IG1ha2VQcmVkaWNhdGUgPSB0b0Fzc2VydDtcblxuZXhwb3J0IHskLCB0b0Fzc2VydCwgbWFrZVByZWRpY2F0ZX1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2hlbHBlci91dGlsLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _util = __webpack_require__(2);\n\nvar _ = _interopRequireWildcard(_util);\n\nvar _tree = __webpack_require__(4);\n\nvar tree = _interopRequireWildcard(_tree);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar STATES = {\n    // 进入filter\n    FILTER_DECLARATION: Symbol(),\n    // 失败则进入Ruleset\n    TRY_DECLARATION: Symbol(),\n    TRY_INTERPOLATION: Symbol(),\n    // 当遇到特殊属性时\n    FUNCTION_CALL: Symbol()\n};\nvar ASSIGNS = { '=': 1, '?=': 2, '^=': 3 };\nvar COMBOS = 'WS > ~ +';\n\nvar isSkipStart = _.makePredicate('WS NEWLINE COMMENT ;');\nvar isWSOrNewLine = _.makePredicate('WS NEWLINE');\nvar isCombo = _.makePredicate(COMBOS);\n\n// probably selector segment\nvar isSelectorSep = _.makePredicate('WS > ~ +' + 'PSEUDO_CLASS PSEUDO_ELEMENT ATTRIBUTE CLASS HASH & TEXT * # #{ : . % - compoundident DIMENSION');\n\nvar isOperator = _.makePredicate('+ - * /');\nvar isRelationOp = _.makePredicate('== >= <= < > !=');\nvar isCommaOrParen = _.makePredicate(', )');\nvar isDirectOperate = _.makePredicate('DIMENSION STRING BOOLEAN TEXT NULL');\n\nvar isColor = _.makePredicate(\"aliceblue antiquewhite aqua aquamarine azure beige bisque black blanchedalmond blue blueviolet brown burlywood cadetblue chartreuse chocolate coral cornflowerblue cornsilk crimson cyan darkblue darkcyan darkgoldenrod darkgray darkgrey darkgreen darkkhaki darkmagenta darkolivegreen darkorange darkorchid darkred darksalmon darkseagreen darkslateblue darkslategray darkslategrey darkturquoise darkviolet deeppink deepskyblue dimgray dimgrey dodgerblue firebrick floralwhite forestgreen fuchsia gainsboro ghostwhite gold goldenrod gray grey green greenyellow honeydew hotpink indianred indigo ivory khaki lavender lavenderblush lawngreen lemonchiffon lightblue lightcoral lightcyan lightgoldenrodyellow lightgray lightgrey lightgreen lightpink lightsalmon lightseagreen lightskyblue lightslategray lightslategrey lightsteelblue lightyellow lime limegreen linen magenta maroon mediumaquamarine mediumblue mediumorchid mediumpurple mediumseagreen mediumslateblue mediumspringgreen mediumturquoise mediumvioletred midnightblue mintcream mistyrose moccasin navajowhite navy oldlace olive olivedrab orange orangered orchid palegoldenrod palegreen paleturquoise palevioletred papayawhip peachpuff peru pink plum powderblue purple red rosybrown royalblue saddlebrown salmon sandybrown seagreen seashell sienna silver skyblue slateblue slategray slategrey snow springgreen steelblue tan teal thistle tomato turquoise violet wheat white whitesmoke yellow yellowgreen\");\nvar isShorthandProp = _.makePredicate('background font margin border border-top border-right border-bottom border-left border-width border-color border-style transition padding list-style border-radius.');\n\nvar isMcssAtKeyword = _.makePredicate('mixin extend var');\nvar isMcssFutureAtKeyword = _.makePredicate('if else css for');\nvar isCssAtKeyword = _.makePredicate('import page keyframe media font-face charset');\n\nvar Parser = function () {\n    function Parser() {\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        _classCallCheck(this, Parser);\n\n        this.options = options;\n    }\n\n    _createClass(Parser, [{\n        key: 'parse',\n        value: function parse(tokens) {\n            // return new Promise((resolve, reject) => {\n            //     // >>>>>> @TODO: 这些要与import 合并 2013/5/12 0:29:42\n\n            // });\n            this._states = {};\n            this.lookahead = tokens;\n            this.p = 0;\n            this.length = this.lookahead.length;\n            this.marked = null;\n            var ast = this.stylesheet();\n            return ast;\n        }\n\n        // store intermedia state\n\n    }, {\n        key: 'state',\n        value: function state(_state) {\n            return this._states[_state] === true;\n        }\n\n        // enter some state\n\n    }, {\n        key: 'enter',\n        value: function enter(state) {\n            this._states[state] = true;\n        }\n\n        // enter some state\n\n    }, {\n        key: 'leave',\n        value: function leave(state) {\n            this._states[state] = false;\n        }\n    }, {\n        key: 'lookUpBefore',\n        value: function lookUpBefore(lookup, before) {\n            var i = 1,\n                la = void 0;\n            while (i++) {\n                if ((la = this.la(i)) === lookup) return true;\n                if (la === before || la === 'EOF' || la === '}') return false;\n            }\n            return false;\n        }\n\n        // Temporarily set to ll(3) parser,\n\n    }, {\n        key: 'll',\n        value: function ll() {\n            var k = arguments.length <= 0 || arguments[0] === undefined ? 1 : arguments[0];\n\n            if (k < 0) k++;\n            var pos = this.p + k - 1;\n            if (pos > this.length - 1) pos = this.length - 1;\n            // return this.lookahead[(this.p + k - 1) % 3];\n            return this.lookahead[pos];\n        }\n\n        // read the next token\n        // @TODO return to token stream!\n\n    }, {\n        key: 'next',\n        value: function next() {\n            var k = arguments.length <= 0 || arguments[0] === undefined ? 1 : arguments[0];\n\n            this.p += k;\n        }\n\n        // expect\n        // some times we need to ignored some lookahead , etc. NEWLINE\n        //\n        // while to eat ';'\n        // 1. eat ;\n        // 2. eat newLine;\n\n    }, {\n        key: 'eat',\n        value: function eat() {\n            var token = this.ll();\n\n            for (var _len = arguments.length, types = Array(_len), _key = 0; _key < _len; _key++) {\n                types[_key] = arguments[_key];\n            }\n\n            for (var i = 0; i < types.length; i++) {\n                if (token.type === types[i]) {\n                    this.next();\n                    return token;\n                }\n            }\n        }\n    }, {\n        key: 'match',\n        value: function match() {\n            var token = this.eat.apply(this, arguments);\n            if (!token) {\n                // >>>>>> ?为什么\n                token = this.ll();\n                this.error('expect: \"' + (arguments.length <= 0 ? undefined : arguments[0]) + '\" -> got: \"' + token.type + '\"', token.lineno);\n            } else return token;\n        }\n\n        //\n\n    }, {\n        key: 'skip',\n        value: function skip(type) {\n            var skiped = false;\n            while (true) {\n                var token = this.ll();\n                if (typeof type === 'string' ? type === token.type : type(token.type)) {\n                    this.next();\n                    skiped = true;\n                } else break;\n            }\n            return skiped;\n        }\n    }, {\n        key: 'skipStart',\n        value: function skipStart() {\n            return this.skip(isSkipStart);\n        }\n    }, {\n        key: 'skipWSOrNewline',\n        value: function skipWSOrNewline() {\n            return this.skip(isWSOrNewLine);\n        }\n\n        // type at pos is some type\n\n    }, {\n        key: 'is',\n        value: function is(pos, type) {\n            return this.ll(pos).type === type;\n        }\n\n        // 简单版本 只允许mark一次\n\n    }, {\n        key: 'mark',\n        value: function mark() {\n            this.marked = this.p;\n            return this;\n        }\n    }, {\n        key: 'restore',\n        value: function restore() {\n            // if(this.marked != undefined) this.p = this.marked;\n            // this.marked = null;\n            if (this.marked != null) {\n                this.p = this.marked;\n                this.marked = null;\n            }\n            return this;\n        }\n\n        // parse Function\n        // ===================\n\n        // stylesheet(topLevel)\n        //  : WS      {skipWhiteSpace}\n        //  | stmt EOF\n        //  ;\n        //\n\n    }, {\n        key: 'stylesheet',\n        value: function stylesheet() {\n            return this.block(true);\n        }\n\n        // statement\n        // stmt\n        //  : ruleset\n        //  | atrule\n        //  ;\n\n    }, {\n        key: 'stmt',\n        value: function stmt() {\n            var node = null;\n            var token = this.ll();\n            if (token.type === 'AT_KEYWORD') node = this.atrule();else if (token.type === 'VAR') {\n                switch (this.ll(2).type) {\n                    case '(':\n                        node = this.funcCall();\n                        this.matchSemiColonIfNoBlock();\n                        break;\n                    case ':':\n                        node = this.transparentCall();\n                        this.matchSemiColonIfNoBlock();\n                        break;\n                    case '=':\n                    case '?=':\n                    case '^=':\n                        node = this.assign();\n                        if (node.value.type !== 'func') this.matchSemiColonIfNoBlock();\n                        break;\n                    default:\n                        this.error('UNEXPECT token after VARIABLE', this.ll(2));\n                }\n            } else if (token.type === 'FUNCTION') {\n                node = this.funcCall();\n                this.matchSemiColonIfNoBlock();\n            } else if (isSelectorSep(token.type)) node = this.ruleset(true);\n\n            if (node) return node;else this.error('INVALID statementstart ' + token.type, token);\n        }\n\n        // atrule\n        //  : css-atrule(@import, @charset...)\n        //  : bi-atrule(@if, @else, @mixin...)\n        //  : directive\n        //  ;\n\n    }, {\n        key: 'atrule',\n        value: function atrule() {\n            var node = null;\n            var fullname = this.ll().value.toLowerCase();\n            var name = this._removePrefix(fullname);\n            if (typeof this[name] === 'function') node = this[name]();else node = this.directive();\n            node.fullname = fullname;\n            return node;\n        }\n\n        // >>>>>> 待补充\n        // 天然支持document、charset等等\n\n    }, {\n        key: 'directive',\n        value: function (_directive) {\n            function directive() {\n                return _directive.apply(this, arguments);\n            }\n\n            directive.toString = function () {\n                return _directive.toString();\n            };\n\n            return directive;\n        }(function () {\n            var token = this.ll();\n            var name = token.value.toLowerCase();\n            var dhook = directive.getDirective(name);\n            if (dhook) {\n                // this.error('undefined atrule: \"' + this.ll().value + '\"')\n                //@TODO add customer syntax\n                console.log('has hook');\n            } else {\n                this.match('AT_KEYWORD');\n                this.eat('WS');\n                var value = this.valuesList();\n                this.eat('WS');\n                if (this.eat(';')) {\n                    return tree.directive(name, value);\n                } else {\n                    var block = this.block();\n                    return tree.directive(name, value, block);\n                }\n                this.error('invalid customer directive define', ll);\n            }\n        })\n\n        /**\n         * @param  {Boolean} has '{}'\n         * @return {[type]}           [description]\n         */\n\n    }, {\n        key: 'block',\n        value: function block(noBlock) {\n            var node = new tree.Block();\n            this.eat('WS');\n            if (!noBlock) this.match('{');\n            var end = noBlock ? 'EOF' : '}';\n            this.skip('WS');\n            while (!this.eat(end)) {\n                var child = void 0;\n                if (noBlock) child = this.stmt();else child = this.mark().declaration() || this.restore().stmt();\n                node.list.push(child);\n                this.skipStart();\n            }\n            return node;\n        }\n\n        // ruleset\n        //  : selectorlist '{' rule ((NewLine|;) rule)* '}'\n\n    }, {\n        key: 'ruleset',\n        value: function ruleset() {\n            var node = new tree.RuleSet();\n            // 1. 是Selector Sep 2\n            // 2. 在是IDENT(Selector Sep之一)时后续不接: 代表不是declaration //  &&(la !== 'IDENT'|| this.la(2) !== ':'\n            // @changelog: 2 remove 这不需要\n            node.selector = this.selectorList();\n            this.eat('WS');\n            node.block = this.block();\n            return node;\n        }\n\n        // selectorList\n        //  : complexSelector (, complexSelector)*\n        //  ;\n\n    }, {\n        key: 'selectorList',\n        value: function selectorList() {\n            var node = new tree.SelectorList();\n            do {\n                node.list.push(this.selector());\n            } while (this.eat(','));\n            node.lineno = node.list[0].lineno;\n            return node;\n        }\n\n        // 简化处理，允许id、class、type插值\n\n    }, {\n        key: 'selector',\n        value: function selector() {\n            var node = new tree.Selector();\n            var selectorString = '';\n            var token = void 0;\n            var i = 0;\n            while (true) {\n                token = this.ll();\n                if (token.type === '#{' && this.ll(2).type !== '}') {\n                    var interpolation = this.interpolation();\n                    if (interpolation) {\n                        selectorString += '#{' + i++ + '}';\n                        node.interpolations.push(interpolation);\n                    } else break;\n                } else if (isSelectorSep(token.type)) {\n                    // >>>>>> 可以优化\n                    var value = token.type === 'DIMENSION' ? tree.toStr(token) : token.value || (token.type === 'WS' ? ' ' : token.type);\n                    selectorString += value;\n                    this.next();\n                } else break;\n            }\n            node.string = selectorString;\n            node.lineno = token.lineno;\n            return node;\n        }\n    }, {\n        key: 'declaration',\n        value: function declaration(noEnd) {\n            var node = new tree.Declaration();\n            var token1 = this.ll(1),\n                token2 = this.ll(2);\n            if (token1.type === '*' && token2.type === 'TEXT') {\n                this.next(1);\n                token2.value = '*' + token2.value;\n            }\n            // >>>>>>\n            node.property = this.compoundIdent();\n            // don't start with tag or don't ll(2) !== ':'\n            if (!node.property) return;\n            this.eat('WS');\n            if (!this.eat(':')) return;\n\n            // filter_declaration在IE下是支持一些不规则的语法\n            if (node.property.value && /filter$/.test(node.property.value.toLowerCase())) this.enter(STATES.FILTER_DECLARATION);\n            this.enter(STATES.TRY_DECLARATION);\n\n            try {\n                node.value = this.valuesList();\n                this.leave(STATES.TRY_DECLARATION);\n            } catch (error) {\n                this.leave(STATES.TRY_DECLARATION);\n                if (error.code === errors.DECLARION_FAIL) return;else throw error;\n            }\n\n            if (this.eat('IMPORTANT')) node.important = true;\n            if (!noEnd) this.matchSemiColonIfNoBlock();\n            this.leave(STATES.FILTER_DECLARATION);\n            return node;\n        }\n    }, {\n        key: 'assign',\n        value: function assign() {\n            var token = this.ll();\n            this.match('VAR');\n            var op = this.match('=', '?=', '^=').type;\n            var value = this.assignExpr(true);\n            //@FIXIT conflict with parenExpr\n            return new tree.Assign(token.value, value, ASSIGNS[op] || 1);\n        }\n\n        /**function();\n         * can be assign expression\n         * function | valueslist | values\n         * @param  {Boolean} hasComma whether has comma in the expression\n         * @return {mixin}\n         */\n\n    }, {\n        key: 'assignExpr',\n        value: function assignExpr(hasComma) {\n            var node = null;\n            var token = this.ll();\n            var fn = hasComma ? 'valuesList' : 'values';\n            if (token.type === '{') // 可能是parenExpr 也可能是function\n                return this.func();else if (token.type === '(') {\n                this.mark();\n                try {\n                    return this.func();\n                } catch (e) {\n                    if (e.expect && e.expect == '{' || e.expect == 'VAR' || e.expect == ')') {\n                        this.restore();\n                        return this[fn]();\n                    } else {\n                        throw e;\n                    }\n                }\n            } else {\n                return this[fn]();\n            }\n        }\n\n        // 1px 1px #fff, 1px 1px #fff ...\n        // comma separated values\n        // valuesList\n\n    }, {\n        key: 'valuesList',\n        value: function valuesList() {\n            var list = [];\n            do {\n                var values = this.values();\n                if (values) list.push(values);else break;\n            } while (this.eat(','));\n\n            if (list.length === 1) return list[0];else return new tree.ValuesList(list);\n        }\n        // component Values\n\n    }, {\n        key: 'values',\n        value: function values() {\n            var list = [];\n            while (true) {\n                var value = this.expression();\n                if (value) list.push(value);else break;\n            }\n\n            if (list.length === 0) return null;else if (list.length === 1) return list[0];else return new tree.Values(list);\n        }\n    }, {\n        key: 'expression',\n        value: function expression() {\n            this.eat('WS');\n            return this.logicOrExpr();\n        }\n\n        // ||\n\n    }, {\n        key: 'logicOrExpr',\n        value: function logicOrExpr() {\n            var left = this.logicAndExpr(),\n                right = void 0;\n            var token = void 0;\n            while ((token = this.ll()).type === '||') {\n                this.next();\n                right = this.logicAndExpr();\n                if (!right) this.error(token.type + ' require right operand', left);\n\n                var bValue = tree.toBoolean(left);\n                if (bValue !== null) {\n                    if (bValue === false) left = right;\n                } else left = new tree.Operator(token.type, left, right);\n                this.eat('WS');\n            }\n            return left;\n        }\n\n        // &&\n\n    }, {\n        key: 'logicAndExpr',\n        value: function logicAndExpr() {\n            var node = this.relationExpr(),\n                right = void 0;\n            var token = void 0;\n            while ((token = this.ll()).type === '&&') {\n                this.next();\n                right = this.relationExpr();\n                if (!right) this.error(token.type + ' require right operand', node);\n\n                var bValue = tree.toBoolean(node);\n                if (bValue != null) {\n                    if (bValue === true) node = right;\n                } else node = new tree.Operator(token.type, node, right);\n                this.eat('WS');\n            }\n            return node;\n        }\n\n        // ==\n        // !=\n        // >=\n        // <=\n        // >\n        // <\n\n    }, {\n        key: 'relationExpr',\n        value: function relationExpr() {\n            var left = this.binop1(),\n                right = void 0;\n            var token = void 0;\n            while (isRelationOp(token = this.ll().type)) {\n                this.next();\n                this.eat('WS');\n                right = this.binop1();\n                if (!right) this.error(token.type + ' require right operand', left);\n\n                if (tree.isPrimary(left.type) && tree.isPrimary(right.type)) left = binop.relation.call(this, left, right, token.type);else left = new tree.Operator(token.type, left, right);\n                this.eat('WS');\n            }\n            return left;\n        }\n\n        // + -\n\n    }, {\n        key: 'binop1',\n        value: function binop1() {\n            var left = this.binop2(),\n                right = void 0;\n            var token = void 0;\n            this.eat('WS');\n            while ((token = this.ll()).type === '+' || token.type === '-') {\n                this.next();\n                this.eat('WS');\n                right = this.binop2();\n                if (!right) this.error(la + ' require right operand', left);\n\n                if (right.type === 'DIMENSION' && left.type === 'DIMENSION') left = binop[token.type].call(this, left, right);else left = new tree.Operator(token.type, left, right);\n                this.eat('WS');\n            }\n            return left;\n        }\n\n        // * / % ... (@TODO 将range与binop2结合, 即同一优先级)\n\n    }, {\n        key: 'binop2',\n        value: function binop2() {\n            var left = this.unary(),\n                right = void 0;\n            var ws = !!this.eat('WS');\n\n            var token = this.ll();\n            // >>>>>>\n            if (token.type === '...') {\n                this.next();\n                this.eat('WS');\n                right = this.unary();\n                return tree.range(left, right, left.lineno);\n            }\n            while (token.type === '*' || token.type === '/' || token.type === '%') {\n                // 即一个空格也没有\n                if (token.type == '/' && !ws && this.ll(2).type !== 'WS') return left;\n                this.next();\n                this.eat('WS');\n                right = this.unary();\n                if (!right) this.error(token.type + ' require right operand', left);\n\n                if (right.type === 'DIMENSION' && left.type === 'DIMENSION') left = binop[token.type].call(this, left, right);else left = new tree.Operator(token.type, left, right);\n                this.eat('WS');\n                token = this.ll();\n            }\n            return left;\n        }\n\n        // range: function(){\n        //     var left = this.ll(),\n        //         node = new tree.ValuesList(),\n        //         right, lc, rc, reverse;\n        //     this.match('DIMENSION')\n        //     this.eat('...');\n        //     right = this.ll();\n        //     this.match(left.type);\n        //     lc = left.value;\n        //     rc = right.value;\n        //     reverse = lc > rc;\n\n        //     for(; lc != rc ;){\n        //         node.list.push({\n        //             type: left.type,\n        //             value: lc\n        //         })\n        //         if(reverse)  lc -= 1\n        //         else lc += 1\n        //     }\n        //     node.list.push({\n        //         type: left.type,\n        //         value: lc\n        //     })\n        //     return node;\n        // },\n\n        // 一元数\n        // @TODO : 加入 ！一元数\n\n    }, {\n        key: 'unary',\n        value: function unary() {\n            var token = this.ll();\n            if (token.type === '-' || token.type === '+' || token.type === '!') {\n                this.next();\n                this.eat('WS');\n                var value = this.unary();\n                var node = new tree.Unary(value, token.type);\n                node.lineno = token.lineno;\n                return node;\n            } else return this.primary();\n        }\n\n        // primary\n        //  : Ident\n        //  : Dimension\n        //  : function\n        //  : Var\n\n    }, {\n        key: 'primary',\n        value: function primary() {\n            var node = null;\n            var token = this.ll();\n            switch (token.type) {\n                case '(':\n                    return this.parenExpr();\n                case '=':\n                    // filter: alpha(xx=80, xx=xx, ddd=xx)\n                    if (this.state(STATES.FILTER_DECLARATION) && this.state(STATES.FUNCTION_CALL)) {\n                        this.next();\n                        return token;\n                    }\n                    break;\n                case '/':\n                    this.next();\n                    return token;\n                case '-':\n                    var token2 = this.ll(2);\n                    if (token2.type === 'TEXT' || token2.type === '#{') return this.compoundIdent();\n                case '#{':\n                case 'TEXT':\n                    return this.compoundIdent();\n                case 'FUNCTION':\n                    return this.funcCall();\n                case 'HASH':\n                    this.next();\n                    var value = token.value;\n                    if (/^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/.test(value)) {\n                        node = new tree.Color(value);\n                        node.lineno = token.lineno;\n                    } else node = new tree.Unknown(token.value);\n                    return node;\n                // TODO 插值\n                case 'STRING':\n                case 'DIMENSION':\n                case 'BOOLEAN':\n                case 'VAR':\n                case 'NULL':\n                case 'URL':\n                    this.next();\n                    return token;\n                case '>':\n                case '~':\n                case '+':\n                case '.':\n                case '#':\n                case '&':\n                case '{':\n                case ':':\n                case '*':\n                case 'PSEUDO_CLASS':\n                case 'CLASS':\n                case 'ATTRIBUTE':\n                    if (this.state(STATES.TRY_DECLARATION)) {\n                        this.error(errors.DECLARION_FAIL);\n                        break;\n                    }\n                default:\n                    return null;\n            }\n        }\n\n        //  : '#{' values '}'\n\n    }, {\n        key: 'interpolation',\n        value: function interpolation() {\n            this.match('#{');\n            var node = this.valuesList();\n            this.match('}');\n            return node;\n        }\n\n        // parenExpr\n        //  : '(' expresion ')'\n\n    }, {\n        key: 'parenExpr',\n        value: function parenExpr() {\n            this.match('(');\n            this.eat('WS');\n            var node = this.valuesList();\n            node.lineno = this.ll().lineno;\n            this.eat('WS');\n            this.match(')');\n            return node;\n        }\n\n        // compoundIdent 组合Ident\n        //  : (interpolation | TEXT) +\n\n    }, {\n        key: 'compoundIdent',\n        value: function compoundIdent() {\n            var node = void 0;\n            var list = [];\n            var token = void 0;\n            var sep = void 0;\n            while (true) {\n                token = this.ll();\n                if (token.type === '#{') {\n                    sep = this.interpolation();\n                    list.push(sep);\n                } else if (token.type === 'TEXT' || token.type === '-') {\n                    this.next();\n                    list.push(token.value || token.type);\n                } else break;\n            }\n            if (!sep) {\n                if (!list.length) return null;else return { type: 'TEXT', value: list[0], lineno: token.lineno };\n            } else {\n                node = new tree.CompoundIdent(list);\n                node.lineno = token.lineno;\n                return node;\n            }\n        }\n    }, {\n        key: 'func',\n        value: function func() {\n            var params = void 0;\n            if (this.eat('(')) {\n                this.eat('WS');\n                params = this.params();\n                this.match(')');\n            }\n            var block = this.block();\n            return new tree.Func(params, block);\n        }\n    }, {\n        key: 'params',\n        value: function params() {\n            var rest = 0,\n                params = [];\n            var token = this.ll();\n            if (token.type !== ')') {\n                do {\n                    var param = this.param();\n                    if (param.rest) rest++;\n                    params.push(param);\n                } while (this.eat(','));\n                if (rest >= 2) this.error('can not have more than 2 rest param', token.lineno);\n                this.eat('WS');\n            }\n            return params;\n        }\n\n        // mixin' params\n\n    }, {\n        key: 'param',\n        value: function param() {\n            var token = this.ll();\n            var name = token.value,\n                dft = void 0,\n                rest = false;\n            this.match('VAR');\n            if (this.eat('...')) rest = true;\n            if (this.eat('=')) {\n                if (rest) this.error('rest type param can\"t have default params', token.lineno);\n                dft = this.values();\n            }\n            return new tree.Param(name, dft, rest);\n        }\n\n        // funcCall\n        //  : CALL FUNCTION '('  expresion * ')'\n\n    }, {\n        key: 'funcCall',\n        value: function funcCall() {\n            var token = this.ll();\n            this.match('FUNCTION', 'VAR');\n            if (token.args) return new tree.FuncCall(token.value, token.args, null, token.lineno);\n            this.eat('WS');\n            this.match('(');\n            this.enter(STATES.FUNCTION_CALL);\n            this.eat('WS');\n            var pargs = this.ll().type !== ')' ? this.args() : { args: [] };\n            this.leave(states.FUNCTION_CALL);\n            this.match(')');\n            return new tree.FuncCall(token.value, pargs.args, pargs.named, token.lineno);\n        }\n\n        //@TODO start named arguments\n\n    }, {\n        key: 'args',\n        value: function args(end) {\n            var token = void 0;\n            var named = null;\n            var args = [];\n            var i = 0;\n            do {\n                token = this.ll();\n                if (token.type === 'VAR' && this.ll(2).type === '=') {\n                    this.next(2);\n                    if (!named) named = {};\n                    named[token.value] = i;\n                }\n                args.push(this.assignExpr());\n                this.skip('WS');\n                i++;\n            } while (this.eat(','));\n\n            return { args: args, named: named };\n        }\n\n        // stylus inspired feature;\n\n    }, {\n        key: 'transparentCall',\n        value: function transparentCall() {\n            var token = this.ll();\n            this.match('VAR');\n            this.match(':');\n            this.eat('WS');\n            var pargs = this.args();\n            // if(args.type === 'values'){\n            //     args = new tree.ValuesList(args.list);\n            // }\n\n            // if(args.type !== 'valueslist') args = [args];\n            // else args = args.list;\n            return tree.FuncCall(token.value, pargs.args, pargs.named, token.lineno);\n        }\n\n        /**\n         * remove at-rule prefix\n         */\n\n    }, {\n        key: '_removePrefix',\n        value: function _removePrefix(str) {\n            return str.replace(/^-\\w+-/, '');\n        }\n    }, {\n        key: 'matchSemiColonIfNoBlock',\n        value: function matchSemiColonIfNoBlock() {\n            this.eat('WS');\n            if (this.ll().type !== '}') this.match(';');\n        }\n    }]);\n\n    return Parser;\n}();\n\nexports.default = Parser;//@ sourceMappingURL=data:application/json;base64,");

/***/ },
/* 4 */
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Node = function () {\n    function Node() {\n        _classCallCheck(this, Node);\n    }\n\n    _createClass(Node, [{\n        key: 'clone',\n        value: function clone() {}\n    }]);\n\n    return Node;\n}();\n\nvar StyleSheet = function () {\n    function StyleSheet() {\n        var list = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n\n        _classCallCheck(this, StyleSheet);\n\n        this.list = list;\n    }\n\n    _createClass(StyleSheet, [{\n        key: 'clone',\n        value: function clone() {\n            // >>>>>> cloneNode没有实现\n            return new StyleSheet(cloneNode(this.list));\n        }\n\n        // >>>>>> 不知道作用\n\n    }, {\n        key: 'exclude',\n        value: function exclude() {\n            var ret = [];\n            for (var i = this.list.length; i--;) {\n                var _item = this.list[i];\n                if (_item.type === 'media') ret.unshift(list.splice(i, 1)[0]);\n            }\n            return ret;\n        }\n    }, {\n        key: 'abstract',\n        value: function abstract() {\n            this.list.forEach(function (ruleset) {\n                return ruleset && (ruleset.abstract = true);\n            });\n            return this;\n        }\n    }]);\n\n    return StyleSheet;\n}();\n\nvar SelectorList = function () {\n    function SelectorList() {\n        var list = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n        var lineno = arguments[1];\n\n        _classCallCheck(this, SelectorList);\n\n        this.list = list;\n        this.lineno = lineno;\n    }\n\n    _createClass(SelectorList, [{\n        key: 'clone',\n        value: function clone() {\n            return new SelectorList(cloneNode(this.list));\n        }\n    }, {\n        key: 'length',\n        value: function length() {\n            return this.list.length;\n        }\n    }]);\n\n    return SelectorList;\n}();\n\n// 复选择器\n\n\nvar Selector = function () {\n    function Selector(string) {\n        var interpolations = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];\n\n        _classCallCheck(this, Selector);\n\n        this.string = string;\n        this.interpolations = interpolations;\n    }\n\n    _createClass(Selector, [{\n        key: 'clone',\n        value: function clone() {\n            return new ComplexSelector(this.string, cloneNode(this.interpolations));\n        }\n    }]);\n\n    return Selector;\n}();\n\nvar RuleSet = function () {\n    function RuleSet(selector, block) {\n        var abstract = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n\n        _classCallCheck(this, RuleSet);\n\n        this.selector = selector;\n        this.block = block;\n        // >>>>>> @TODO for mixin\n        this.ref = [];\n        this.abstract = abstract;\n    }\n\n    _createClass(RuleSet, [{\n        key: 'addRef',\n        value: function addRef(ruleset) {\n            if (!this.ref.includes(item)) this.ref.push(ruleset);\n        }\n    }, {\n        key: 'getSelectors',\n        value: function getSelectors() {\n            if (this.selector._compute === true) return this.selector.list;\n\n            var selectors = this.selector.list;\n            var plist = void 0;\n            if (this.parent && (plist = this.parent.getSelectors()) && plist.length) selectors = this._concatSelector(selectors, plist);\n\n            if (!this.parent) this.selector.list.forEach(function (selector) {\n                return selector.string = selector.string.replace(/&/g, '');\n            });\n\n            if (this.ref.length) {\n                this.ref.forEach(function (ruleset) {\n                    return selectors = [].concat(_toConsumableArray(selectors), _toConsumableArray(ruleset.getSelectors()));\n                });\n                this.ref = [];\n            }\n\n            this.selector.list = selectors;\n            this.selector._compute = true;\n            return selectors;\n        }\n    }]);\n\n    return RuleSet;\n}();\n\nvar Block = function () {\n    function Block() {\n        var list = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n\n        _classCallCheck(this, Block);\n\n        this.list = list;\n    }\n\n    _createClass(Block, [{\n        key: 'exclude',\n        value: function exclude(isMedia) {\n            var ret = [];\n        }\n    }]);\n\n    return Block;\n}();\n\nvar Declaration = function Declaration(property, value) {\n    var important = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n\n    _classCallCheck(this, Declaration);\n\n    Object.assign(this, { property: property, value: value, important: important });\n};\n\nvar ValuesList = function () {\n    function ValuesList() {\n        var list = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n        var lineno = arguments[1];\n\n        _classCallCheck(this, ValuesList);\n\n        this.list = list;\n        this.lineno = lineno;\n    }\n\n    _createClass(ValuesList, [{\n        key: 'flatten',\n        value: function flatten() {\n            var list = this.list,\n                i = list.length,\n                values;\n            for (; i--;) {\n                values = list[i];\n                if (values.type == 'valueslist') {\n                    splice.apply(list, [i, 1].concat(values.list));\n                }\n            }\n            return this;\n        }\n    }, {\n        key: 'first',\n        value: function first() {\n            return this.list[0].list[0];\n        }\n    }]);\n\n    return ValuesList;\n}();\n\nvar Values = function () {\n    function Values() {\n        var list = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n\n        _classCallCheck(this, Values);\n\n        this.list = list;\n    }\n\n    _createClass(Values, [{\n        key: 'flatten',\n        value: function flatten() {\n            var list = this.list,\n                i = list.length,\n                value;\n            for (; i--;) {\n                value = list[i];\n                if (value.type == 'values') {\n                    splice.apply(this, [i, 1].concat(value.list));\n                }\n            }\n            return this;\n        }\n    }]);\n\n    return Values;\n}();\n\n// 所有侦测不出的类似统一放置在这里\n\n\nvar Unknown = function Unknown(name) {\n    _classCallCheck(this, Unknown);\n\n    this.name = name;\n};\n\nvar Assign = function Assign(name, value) {\n    var mode = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];\n\n    _classCallCheck(this, Assign);\n\n    Object.assign(this, { name: name, value: value, mode: mode });\n};\n\nvar Operator = function Operator(op, left, right) {\n    _classCallCheck(this, Operator);\n\n    Object.assign(this, { op: op, left: left, right: right });\n};\n\nvar Range = function Range(left, right) {\n    _classCallCheck(this, Range);\n\n    this.left = left;\n    this.right = right;\n};\n\nvar Unary = function Unary(value, op) {\n    _classCallCheck(this, Unary);\n\n    this.value = value;\n    this.op = op;\n};\n\nvar Dimension = function () {\n    function Dimension(value, unit) {\n        _classCallCheck(this, Dimension);\n\n        this.value = value;\n        this.unit = unit;\n    }\n\n    _createClass(Dimension, [{\n        key: 'toString',\n        value: function toString() {\n            return this.value + (this.unit || '');\n        }\n    }]);\n\n    return Dimension;\n}();\n\nvar CompoundIdent = function () {\n    function CompoundIdent() {\n        var list = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n\n        _classCallCheck(this, CompoundIdent);\n\n        this.list = list;\n    }\n\n    _createClass(CompoundIdent, [{\n        key: 'toString',\n        value: function toString() {\n            return this.list.join('');\n        }\n    }]);\n\n    return CompoundIdent;\n}();\n\n// list is a block statement\n// defaults is default params\n\n\nvar Func = function Func() {\n    var params = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n    var block = arguments[1];\n    var name = arguments[2];\n\n    _classCallCheck(this, Func);\n\n    Object.assign(this, { params: params, block: block, name: name });\n};\n\nvar Param = function Param(name, dft) {\n    var rest = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n\n    _classCallCheck(this, Param);\n\n    Object.assign(this, { name: name, dft: dft, rest: rest });\n};\n\nvar FuncCall = function FuncCall(name, args, named, lineno) {\n    _classCallCheck(this, FuncCall);\n\n    Object.assign(this, { name: name, args: args, named: named, lineno: lineno });\n};\n\nexports.Node = Node;\nexports.StyleSheet = StyleSheet;\nexports.RuleSet = RuleSet;\nexports.SelectorList = SelectorList;\nexports.Selector = Selector;\nexports.Block = Block;\nexports.Declaration = Declaration;\nexports.ValuesList = ValuesList;\nexports.Values = Values;\nexports.Unknown = Unknown;\nexports.Assign = Assign;\nexports.Operator = Operator;\nexports.Range = Range;\nexports.Unary = Unary;\nexports.Dimension = Dimension;\nexports.Func = Func;\nexports.Param = Param;\nexports.FuncCall = FuncCall;//@ sourceMappingURL=data:application/json;base64,");

/***/ }
/******/ ])
});
;