/**
 * bin operator
 * ==================
 *
 * priority is same as javascript
 * unary(!-) > binop1(* / %) > binop2 (+ -)  > relation(== != >= <= > <) > and(&&) > or(||) 
 */

// simple + - 
body{
    add1: 10 + 20;     //30
    add2: 10px + 20px; // 30px
    add3: 10pt + 20;   // 30pt
    add4: 10 + 20em; // 30em
    add5: 10 + 'px';  // 10px
    add6: 10 + px;  // 10px
    add7: px + 10;  // px10
    add8: 'px' + 10;  // 'px10'
    add9: 'px' + hello; // 'pxhello'
    add10: hello+'px'; // hellopx
    add11: hello+px; // hellopx
    add12: 'hello'+px; // hellopx
}

// simple * / % 
body{
    mult1: 10*10;       //100
    mult2: 10px*10;     //100px
    mult3: 10*10pt;     //100pt
    mult4: 10pt*10px;   //100pt
}

// simpe ||  &&   logic
body{
    or1: 0 || 1;
    or2: 0 || '' || true;   //left operator
    and1: 0px && 1;
    and2: 1 && 2 && false;  // left operator
    // && have high proprioty verus ||
    andor: 0 || 1 && 2;

}

// simpe unary - !
body{
    $num = 1;
    neg: -$num;
    reverse: !$num;
}


// relation
body {
    gt: 10>5;
    lt: 9<6;
    ge1: 9>=8;
    ge2: 9>=10;
    le1: 9<=10;
    le1: 9>=10;
    eq1: 9==9;
    eq2: 9==19;
    nq1: 9!=9;
    nq2: 9!='da';
    nq3: 'ccc' == ccc;
}

// paren
body{
    paren1: (10 + 9) * 10; //190
    paren2: 10 + 9 * 10;   // 100
    paren3: ('' || 10px) + 20px;   // 30px
}

// combination combinator
body{
    $name = 'name';
    $text = hello;
    complex1: $name + 10px + 20px || 0px;
    complex2: ($name + 10px + 20px) && 1px;
}


body{
    // beacuse css support neg number 
    // so - operator should have WS after it
    sub1: 10 - 20;     // -10
    sub2: 10px - 20px; // -10px
    sub3: 10pt - 20;   // -10pt
    sub4: 10 - 20em; // 10em
    sub5: 10 -20;     // 10 -20
    sub6: 10px -20px; // 10px -20px
    sub7: 10pt -20;   // 10pt -10pt
    sub8: 10 -20em; // 10 -20em
    // the '/' operation at least has one WS around it
    // beacuse font: 14px/2   is valid in css;  
    div1: 10/10;       //10/10
    div2: 10px/10;     //10px/10
    div3: 10/10pt;     //10/10pt
    div4: 10pt/10px;   //10pt/10px
    div1: 10 / 10;       //1
    div2: 10px/ 10;     //1px
    div3: 10 / 10pt;     //1pt
    div4: 10pt /10px;   //1pt
    // if a number literal, remenber to insert a WS before % to avoid be tokenized as a percent
    remain: 21 %6;       //  3
    remain: 21%6;       //  21%6
    remain: 21px%6;     // 3px
    remain: 21 %6px;     // 3px
    remain: 21%6px;     // 21% 6px
    remain: 21px%6pt;   // 3px
}


